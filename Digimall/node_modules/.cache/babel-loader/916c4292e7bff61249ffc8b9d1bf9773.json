{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport CSSMotion from 'rc-motion';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport VerticalAlignTopOutlined from '@ant-design/icons/VerticalAlignTopOutlined';\nimport { throttleByAnimationFrame } from '../_util/throttleByAnimationFrame';\nimport { ConfigContext } from '../config-provider';\nimport getScroll from '../_util/getScroll';\nimport scrollTo from '../_util/scrollTo';\nimport { cloneElement } from '../_util/reactNode';\n\nvar BackTop = function BackTop(props) {\n  var _useMergedState = useMergedState(false, {\n    value: props.visible\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      visible = _useMergedState2[0],\n      setVisible = _useMergedState2[1];\n\n  var ref =\n  /*#__PURE__*/\n  React.createRef();\n  var scrollEvent = React.useRef();\n\n  var getDefaultTarget = function getDefaultTarget() {\n    return ref.current && ref.current.ownerDocument ? ref.current.ownerDocument : window;\n  };\n\n  var handleScroll = throttleByAnimationFrame(function (e) {\n    var visibilityHeight = props.visibilityHeight;\n    var scrollTop = getScroll(e.target, true);\n    setVisible(scrollTop > visibilityHeight);\n  });\n\n  var bindScrollEvent = function bindScrollEvent() {\n    var target = props.target;\n    var getTarget = target || getDefaultTarget;\n    var container = getTarget();\n    scrollEvent.current = addEventListener(container, 'scroll', function (e) {\n      handleScroll(e);\n    });\n    handleScroll({\n      target: container\n    });\n  };\n\n  React.useEffect(function () {\n    bindScrollEvent();\n    return function () {\n      if (scrollEvent.current) {\n        scrollEvent.current.remove();\n      }\n\n      handleScroll.cancel();\n    };\n  }, [props.target]);\n\n  var scrollToTop = function scrollToTop(e) {\n    var onClick = props.onClick,\n        target = props.target,\n        _props$duration = props.duration,\n        duration = _props$duration === void 0 ? 450 : _props$duration;\n    scrollTo(0, {\n      getContainer: target || getDefaultTarget,\n      duration: duration\n    });\n\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  var renderChildren = function renderChildren(_ref) {\n    var prefixCls = _ref.prefixCls;\n    var children = props.children;\n    var defaultElement =\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-content\")\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-icon\")\n    },\n    /*#__PURE__*/\n    React.createElement(VerticalAlignTopOutlined, null)));\n    return (\n      /*#__PURE__*/\n      React.createElement(CSSMotion, {\n        visible: visible,\n        motionName: \"fade\",\n        removeOnLeave: true\n      }, function (_ref2) {\n        var motionClassName = _ref2.className;\n        var childNode = children || defaultElement;\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null, cloneElement(childNode, function (_ref3) {\n            var className = _ref3.className;\n            return {\n              className: classNames(motionClassName, className)\n            };\n          }))\n        );\n      })\n    );\n  };\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var customizePrefixCls = props.prefixCls,\n      _props$className = props.className,\n      className = _props$className === void 0 ? '' : _props$className;\n  var prefixCls = getPrefixCls('back-top', customizePrefixCls);\n  var classString = classNames(prefixCls, _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), className); // fix https://fb.me/react-unknown-prop\n\n  var divProps = omit(props, ['prefixCls', 'className', 'children', 'visibilityHeight', 'target', 'visible']);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({}, divProps, {\n      className: classString,\n      onClick: scrollToTop,\n      ref: ref\n    }), renderChildren({\n      prefixCls: prefixCls\n    }))\n  );\n};\n\nBackTop.defaultProps = {\n  visibilityHeight: 400\n};\nexport default\n/*#__PURE__*/\nReact.memo(BackTop);","map":null,"metadata":{},"sourceType":"module"}