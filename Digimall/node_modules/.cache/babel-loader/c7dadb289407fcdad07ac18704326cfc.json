{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport Col from '../grid/col';\nimport { FormContext, FormItemPrefixContext } from './context';\nimport ErrorList from './ErrorList';\nvar iconMap = {\n  success: CheckCircleFilled,\n  warning: ExclamationCircleFilled,\n  error: CloseCircleFilled,\n  validating: LoadingOutlined\n};\n\nvar FormItemInput = function FormItemInput(props) {\n  var prefixCls = props.prefixCls,\n      status = props.status,\n      wrapperCol = props.wrapperCol,\n      children = props.children,\n      help = props.help,\n      errors = props.errors,\n      onDomErrorVisibleChange = props.onDomErrorVisibleChange,\n      hasFeedback = props.hasFeedback,\n      formItemRender = props._internalItemRender,\n      validateStatus = props.validateStatus,\n      extra = props.extra;\n  var baseClassName = \"\".concat(prefixCls, \"-item\");\n  var formContext = React.useContext(FormContext);\n  var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n  var className = classNames(\"\".concat(baseClassName, \"-control\"), mergedWrapperCol.className);\n  React.useEffect(function () {\n    return function () {\n      onDomErrorVisibleChange(false);\n    };\n  }, []); // Should provides additional icon if `hasFeedback`\n\n  var IconNode = validateStatus && iconMap[validateStatus];\n  var icon = hasFeedback && IconNode ?\n  /*#__PURE__*/\n  React.createElement(\"span\", {\n    className: \"\".concat(baseClassName, \"-children-icon\")\n  },\n  /*#__PURE__*/\n  React.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info\n\n  var subFormContext = _extends({}, formContext);\n\n  delete subFormContext.labelCol;\n  delete subFormContext.wrapperCol;\n  var inputDom =\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input\")\n  },\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-control-input-content\")\n  }, children), icon);\n  var errorListDom =\n  /*#__PURE__*/\n  React.createElement(FormItemPrefixContext.Provider, {\n    value: {\n      prefixCls: prefixCls,\n      status: status\n    }\n  },\n  /*#__PURE__*/\n  React.createElement(ErrorList, {\n    errors: errors,\n    help: help,\n    onDomErrorVisibleChange: onDomErrorVisibleChange\n  })); // If extra = 0, && will goes wrong\n  // 0&&error -> 0\n\n  var extraDom = extra ?\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: \"\".concat(baseClassName, \"-extra\")\n  }, extra) : null;\n  var dom = formItemRender && formItemRender.mark === 'pro_table_render' && formItemRender.render ? formItemRender.render(props, {\n    input: inputDom,\n    errorList: errorListDom,\n    extra: extraDom\n  }) :\n  /*#__PURE__*/\n  React.createElement(React.Fragment, null, inputDom, errorListDom, extraDom);\n  return (\n    /*#__PURE__*/\n    React.createElement(FormContext.Provider, {\n      value: subFormContext\n    },\n    /*#__PURE__*/\n    React.createElement(Col, _extends({}, mergedWrapperCol, {\n      className: className\n    }), dom))\n  );\n};\n\nexport default FormItemInput;","map":null,"metadata":{},"sourceType":"module"}