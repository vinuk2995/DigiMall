{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport raf from \"rc-util/es/raf\";\nimport useForceUpdate from '../_util/hooks/useForceUpdate'; // Note. Only for upload usage. Do not export to global util hooks\n\nexport default function useFreshState(defaultValue, propValue) {\n  var valueRef = useRef(defaultValue);\n  var forceUpdate = useForceUpdate();\n  var rafRef = useRef(); // Set value\n\n  function setValue(newValue) {\n    valueRef.current = newValue;\n    forceUpdate();\n  }\n\n  function cleanUp() {\n    raf.cancel(rafRef.current);\n  }\n\n  function rafSyncValue(newValue) {\n    cleanUp();\n    rafRef.current = raf(function () {\n      setValue(newValue);\n    });\n  } // Get value\n\n\n  function getValue() {\n    var displayValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (displayValue) {\n      return propValue || valueRef.current;\n    }\n\n    return valueRef.current;\n  } // Effect will always update in a next frame to avoid sync state overwrite current processing state\n\n\n  useEffect(function () {\n    if (propValue) {\n      rafSyncValue(propValue);\n    }\n  }, [propValue]); // Clean up\n\n  useEffect(function () {\n    return function () {\n      cleanUp();\n    };\n  }, []);\n  return [getValue, setValue];\n}","map":null,"metadata":{},"sourceType":"module"}