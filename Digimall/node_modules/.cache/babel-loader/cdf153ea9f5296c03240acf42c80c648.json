{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useState } from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\n\nfunction getNumberArray(num) {\n  return num ? num.toString().split('').reverse().map(function (i) {\n    var current = Number(i);\n    return isNaN(current) ? i : current;\n  }) : [];\n}\n\nfunction renderNumberList(position, className) {\n  var childrenToReturn = [];\n\n  for (var i = 0; i < 30; i++) {\n    childrenToReturn.push(\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      key: i.toString(),\n      className: classNames(className, {\n        current: position === i\n      })\n    }, i % 10));\n  }\n\n  return childrenToReturn;\n}\n\nvar ScrollNumber = function ScrollNumber(_a) {\n  var customizePrefixCls = _a.prefixCls,\n      customizeCount = _a.count,\n      className = _a.className,\n      style = _a.style,\n      title = _a.title,\n      show = _a.show,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'sup' : _a$component,\n      children = _a.children,\n      _a$onAnimated = _a.onAnimated,\n      onAnimated = _a$onAnimated === void 0 ? function () {} : _a$onAnimated,\n      restProps = __rest(_a, [\"prefixCls\", \"count\", \"className\", \"style\", \"title\", \"show\", \"component\", \"children\", \"onAnimated\"]);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      animateStarted = _useState2[0],\n      setAnimateStarted = _useState2[1];\n\n  var _useState3 = useState(customizeCount),\n      _useState4 = _slicedToArray(_useState3, 2),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var _useState5 = useState(customizeCount),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevCount = _useState6[0],\n      setPrevCount = _useState6[1];\n\n  var _useState7 = useState(customizeCount),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lastCount = _useState8[0],\n      setLastCount = _useState8[1];\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('scroll-number', customizePrefixCls);\n\n  if (prevCount !== customizeCount) {\n    setAnimateStarted(true);\n    setPrevCount(customizeCount);\n  }\n\n  React.useEffect(function () {\n    setLastCount(count);\n    var timeout;\n\n    if (animateStarted) {\n      // Let browser has time to reset the scroller before actually\n      // performing the transition.\n      timeout = setTimeout(function () {\n        setAnimateStarted(false);\n        setCount(customizeCount);\n        onAnimated();\n      });\n    }\n\n    return function () {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    };\n  }, [animateStarted, customizeCount, onAnimated]); // =========================== Function ===========================\n\n  var getPositionByNum = function getPositionByNum(num, i) {\n    var currentCount = Math.abs(Number(count));\n    var lstCount = Math.abs(Number(lastCount));\n    var currentDigit = Math.abs(getNumberArray(count)[i]);\n    var lastDigit = Math.abs(getNumberArray(lstCount)[i]);\n\n    if (animateStarted) {\n      return 10 + num;\n    } // 同方向则在同一侧切换数字\n\n\n    if (currentCount > lstCount) {\n      if (currentDigit >= lastDigit) {\n        return 10 + num;\n      }\n\n      return 20 + num;\n    }\n\n    if (currentDigit <= lastDigit) {\n      return 10 + num;\n    }\n\n    return num;\n  }; // ============================ Render ============================\n\n\n  var newProps = _extends(_extends({}, restProps), {\n    'data-show': show,\n    style: style,\n    className: classNames(prefixCls, className),\n    title: title\n  });\n\n  var renderCurrentNumber = function renderCurrentNumber(num, i) {\n    if (typeof num === 'number') {\n      var position = getPositionByNum(num, i);\n      var removeTransition = animateStarted || getNumberArray(lastCount)[i] === undefined;\n      return (\n        /*#__PURE__*/\n        React.createElement('span', {\n          className: \"\".concat(prefixCls, \"-only\"),\n          style: {\n            transition: removeTransition ? 'none' : undefined,\n            msTransform: \"translateY(\".concat(-position * 100, \"%)\"),\n            WebkitTransform: \"translateY(\".concat(-position * 100, \"%)\"),\n            transform: \"translateY(\".concat(-position * 100, \"%)\")\n          },\n          key: i\n        }, renderNumberList(position, \"\".concat(prefixCls, \"-only-unit\")))\n      );\n    }\n\n    return (\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        key: \"symbol\",\n        className: \"\".concat(prefixCls, \"-symbol\")\n      }, num)\n    );\n  };\n\n  var numberNode = count && Number(count) % 1 === 0 ? getNumberArray(count).map(function (num, i) {\n    return renderCurrentNumber(num, i);\n  }).reverse() : count; // allow specify the border\n  // mock border-color by box-shadow for compatible with old usage:\n  // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\n\n  if (style && style.borderColor) {\n    newProps.style = _extends(_extends({}, style), {\n      boxShadow: \"0 0 0 1px \".concat(style.borderColor, \" inset\")\n    });\n  }\n\n  if (children) {\n    return cloneElement(children, function (oriProps) {\n      return {\n        className: classNames(\"\".concat(prefixCls, \"-custom-component\"), oriProps === null || oriProps === void 0 ? void 0 : oriProps.className)\n      };\n    });\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(component, newProps, numberNode)\n  );\n};\n\nexport default ScrollNumber;","map":null,"metadata":{},"sourceType":"module"}